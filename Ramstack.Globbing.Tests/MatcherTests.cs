namespace Ramstack.Globbing;

[TestFixture]
public class MatcherTests
{
    [TestCase("",                    "",                     ExpectedResult = true)]
    [TestCase("main.c",              "main.c",               ExpectedResult = true)]
    [TestCase("main.h",              "main.c",               ExpectedResult = false)]
    [TestCase("",                    "main.c",               ExpectedResult = false)]
    [TestCase("main.c",              "",                     ExpectedResult = false)]

    [TestCase("main.?",              "main.c",               ExpectedResult = true)]
    [TestCase("*.c",                 "main.c",               ExpectedResult = true)]
    [TestCase("main.*",              "main.c",               ExpectedResult = true)]
    [TestCase("m*n.*",               "main.c",               ExpectedResult = true)]
    [TestCase("m*in.c*",             "main.c",               ExpectedResult = true)]
    [TestCase("*",                   "",                     ExpectedResult = true)]

    [TestCase("Law*",                "Law",                  ExpectedResult = true)]
    [TestCase("Law*",                "Laws",                 ExpectedResult = true)]
    [TestCase("Law*",                "Lawyer",               ExpectedResult = true)]
    [TestCase("Law*",                "GrokLaw",              ExpectedResult = false)]
    [TestCase("Law*",                "La",                   ExpectedResult = false)]
    [TestCase("Law*",                "aw",                   ExpectedResult = false)]

    [TestCase("*Law",                "Law",                  ExpectedResult = true)]
    [TestCase("*Law",                "GrokLaw",              ExpectedResult = true)]
    [TestCase("*Law",                "La",                   ExpectedResult = false)]
    [TestCase("*Law",                "Grok",                 ExpectedResult = false)]

    [TestCase("*Law*",               "Law",                  ExpectedResult = true)]
    [TestCase("*Law*",               "Lawyer",               ExpectedResult = true)]
    [TestCase("*Law*",               "GrokLaw",              ExpectedResult = true)]
    [TestCase("*Law*",               "La",                   ExpectedResult = false)]
    [TestCase("*Law*",               "aw",                   ExpectedResult = false)]

    [TestCase("main.{c}",            "main.c",               ExpectedResult = true)]
    [TestCase("main.{c}",            "main.h",               ExpectedResult = false)]
    [TestCase("main.{c,h}",          "main.c",               ExpectedResult = true)]
    [TestCase("main.{c,h}",          "main.h",               ExpectedResult = true)]
    [TestCase("main.{c,h}",          "main.d",               ExpectedResult = false)]
    [TestCase("main.{c,h}.bak",      "main.c.bak",           ExpectedResult = true)]
    [TestCase("main{.c,.h,}.bak",    "main.h.bak",           ExpectedResult = true)]
    [TestCase("main{.c,.h,}.bak",    "main.bak",             ExpectedResult = true)]
    [TestCase("main{.c,.h,}.bak",    "main.c",               ExpectedResult = false)]
    [TestCase("main{.c,.h,}.bak",    "main.h",               ExpectedResult = false)]
    [TestCase("main{.c,.h,}.bak",    "main.d",               ExpectedResult = false)]
    [TestCase("{{a,b},{c,d}}",       "a",                    ExpectedResult = true)]
    [TestCase("{{a,b},{c,d}}",       "b",                    ExpectedResult = true)]
    [TestCase("{{a,b},{c,d}}",       "c",                    ExpectedResult = true)]
    [TestCase("{{a,b},{c,d}}",       "d",                    ExpectedResult = true)]
    [TestCase("main.{{{cs},{h}}}",   "main.cs",              ExpectedResult = true)]
    [TestCase("main.{{{cs},{h}}}",   "main.h",               ExpectedResult = true)]
    [TestCase("main.{{{cs},{h}}}",   "main.d",               ExpectedResult = false)]

    [TestCase("main.{c,cp,cpp}",     "main.c",               ExpectedResult = true)]
    [TestCase("main.{c,cp,cpp}",     "main.cp",              ExpectedResult = true)]
    [TestCase("main.{c,cp,cpp}",     "main.cpp",             ExpectedResult = true)]

    [TestCase("m.{c,cp,cpp}.bak",    "m.c.bak",              ExpectedResult = true)]
    [TestCase("m.{c,cp,cpp}.bak",    "m.cp.bak",             ExpectedResult = true)]
    [TestCase("m.{c,cp,cpp}.bak",    "m.cpp.bak",            ExpectedResult = true)]
    [TestCase("m.{c,cp,cpp}.bak",    "m.cpp",                ExpectedResult = false)]
    [TestCase("m.{c,cp,cpp}.bak",    "m.css.bak",            ExpectedResult = false)]

    [TestCase("main{.c,.h,}",        "main",                 ExpectedResult = true)]
    [TestCase("main{.c,.h,}",        "main.c",               ExpectedResult = true)]
    [TestCase("main{.c,.h,}",        "main.h",               ExpectedResult = true)]
    [TestCase("main{.c,.h,}",        "main.d",               ExpectedResult = false)]

    [TestCase("m{.c,.h,}.bak",       "m.bak",                ExpectedResult = true)]
    [TestCase("m{.c,.h,}.bak",       "m.c.bak",              ExpectedResult = true)]
    [TestCase("m{.c,.h,}.bak",       "m.h.bak",              ExpectedResult = true)]
    [TestCase("m{.c,.h,}.bak",       "m.d.bak",              ExpectedResult = false)]
    [TestCase("m{.c,.h,}.bak",       "a.c.bak",              ExpectedResult = false)]
    [TestCase("m{.c,.h,}.bak",       "a.bak",                ExpectedResult = false)]
    [TestCase("m{.c,.h,}.bak",       "a.zip",                ExpectedResult = false)]

    [TestCase("**",                  "",                      ExpectedResult = true)]
    [TestCase("***",                 "",                      ExpectedResult = true)]
    [TestCase("****",                "",                      ExpectedResult = true)]
    [TestCase("{}",                  "",                      ExpectedResult = true)]
    [TestCase("{}{}",                "",                      ExpectedResult = true)]
    [TestCase("{}{}{}",              "",                      ExpectedResult = true)]
    [TestCase("*{}*{}*{}*{}",        "",                      ExpectedResult = true)]
    [TestCase("*{}{}**{}{}**{}{}",   "",                      ExpectedResult = true)]
    [TestCase("*{}**{}{}**",         "",                      ExpectedResult = true)]

    [TestCase("a*",                  "a",                     ExpectedResult = true)]
    [TestCase("a**",                 "a",                     ExpectedResult = true)]
    [TestCase("a***",                "a",                     ExpectedResult = true)]
    [TestCase("a****",               "a",                     ExpectedResult = true)]
    [TestCase("a{}",                 "a",                     ExpectedResult = true)]
    [TestCase("a{}{}",               "a",                     ExpectedResult = true)]
    [TestCase("a{}{}{}",             "a",                     ExpectedResult = true)]
    [TestCase("a*{}*{}*{}*{}",       "a",                     ExpectedResult = true)]
    [TestCase("a*{}{}**{}{}**{}{}",  "a",                     ExpectedResult = true)]
    [TestCase("a*{}**{}{}**",        "a",                     ExpectedResult = true)]

    [TestCase("a*b",                 "a",                     ExpectedResult = false)]
    [TestCase("a{}b",                "a",                     ExpectedResult = false)]
    [TestCase("a{,}b",               "a",                     ExpectedResult = false)]
    [TestCase("a{}}",                "a",                     ExpectedResult = false)]
    [TestCase("*b",                  "",                      ExpectedResult = false)]
    [TestCase("{}b",                 "",                      ExpectedResult = false)]
    [TestCase("{,}b",                "",                      ExpectedResult = false)]
    [TestCase("{}}",                 "",                      ExpectedResult = false)]

    [TestCase("a*",                  "ab",                    ExpectedResult = true)]
    [TestCase("a**",                 "ab",                    ExpectedResult = true)]
    [TestCase("a***",                "ab",                    ExpectedResult = true)]
    [TestCase("a****",               "ab",                    ExpectedResult = true)]
    [TestCase("a{}",                 "ab",                    ExpectedResult = false)]
    [TestCase("a{}{}",               "ab",                    ExpectedResult = false)]
    [TestCase("a{}{}{}",             "ab",                    ExpectedResult = false)]
    [TestCase("a{,b}{,c}{,d}",       "a",                     ExpectedResult = true)]
    [TestCase("a{,b}{,c}{,d}",       "ab",                    ExpectedResult = true)]
    [TestCase("a{,b}{,c}",           "abc",                   ExpectedResult = true)]
    [TestCase("a{,b}{,c}{,d}",       "abc",                   ExpectedResult = true)]
    [TestCase("a{,b}{,c}{,d}",       "abd",                   ExpectedResult = true)]
    [TestCase("a{,b}{,c}",           "ab",                    ExpectedResult = true)]
    [TestCase("a{,b}{,c}",           "ac",                    ExpectedResult = true)]
    [TestCase("a{,b}{,c}",           "ad",                    ExpectedResult = false)]
    [TestCase("a*{}*{}*{}*{}",       "ab",                    ExpectedResult = true)]
    [TestCase("a*{}{}**{}{}**{}{}",  "ab",                    ExpectedResult = true)]
    [TestCase("a*{}**{}{}**",        "ab",                    ExpectedResult = true)]
    [TestCase("a*{}{}{b}",           "ab",                    ExpectedResult = true)]
    [TestCase("{a}{b}{c}",           "abc",                   ExpectedResult = true)]

    [TestCase("{}",                  "",                     ExpectedResult = true)]
    [TestCase("{,}",                 "",                     ExpectedResult = true)]
    [TestCase("{,,,,,}",             "",                     ExpectedResult = true)]
    [TestCase("{{{{},{},{},{}}}}",   "",                     ExpectedResult = true)]

    [TestCase("{,a}",                "a",                    ExpectedResult = true)]
    [TestCase("{,,,,a}",             "a",                    ExpectedResult = true)]
    [TestCase("{,,,,a}",             "a",                    ExpectedResult = true)]
    [TestCase("{a,,,,}",             "a",                    ExpectedResult = true)]
    [TestCase("{,a,}",               "a",                    ExpectedResult = true)]
    [TestCase("{{},{},{},a}",        "a",                    ExpectedResult = true)]
    [TestCase("{{},{},{,a}}",        "a",                    ExpectedResult = true)]
    [TestCase("{{{}},{,{{,{,a}}}}}", "a",                    ExpectedResult = true)]
    [TestCase("{{{}},{,{{,{,a}}}}}", "b",                    ExpectedResult = false)]
    [TestCase("{,a}",                "b",                    ExpectedResult = false)]
    [TestCase("{,,,,a}b",            "ab",                   ExpectedResult = true)]
    [TestCase("{{},{},{,{,a}}}b",    "ab",                   ExpectedResult = true)]
    [TestCase("{a}",                 "",                     ExpectedResult = false)]
    [TestCase("{a{}}",               "",                     ExpectedResult = false)]
    [TestCase("t{a{}}",              "t",                    ExpectedResult = false)]

    [TestCase("[a]",                 "",                     ExpectedResult = false)]
    [TestCase("main.[c]",            "main.c",               ExpectedResult = true)]
    [TestCase("main.[c]",            "main.d",               ExpectedResult = false)]
    [TestCase("main.[dch]",          "main.c",               ExpectedResult = true)]
    [TestCase("main.[dch]",          "main.d",               ExpectedResult = true)]
    [TestCase("main.[dch]",          "main.h",               ExpectedResult = true)]
    [TestCase("main.[c-d]",          "main.c",               ExpectedResult = true)]
    [TestCase("main.[c-d]",          "main.d",               ExpectedResult = true)]
    [TestCase("main.[c-dh]",         "main.c",               ExpectedResult = true)]
    [TestCase("main.[c-dh]",         "main.d",               ExpectedResult = true)]
    [TestCase("main.[c-dh]",         "main.h",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.h",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.a",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.z",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.0",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.5",               ExpectedResult = true)]
    [TestCase("main.[a-z0-9]",       "main.9",               ExpectedResult = true)]
    [TestCase("main.[A-Fa-f0-9]",    "main.C",               ExpectedResult = true)]
    [TestCase("main.[A-Fa-f0-9]",    "main.c",               ExpectedResult = true)]
    [TestCase("main.[A-Fa-f0-9]",    "main.5",               ExpectedResult = true)]
    [TestCase("main.[A-Fa-f0-9]",    "main.-",               ExpectedResult = false)]
    [TestCase("main.[A-Fa-f0-9]",    "main.z",               ExpectedResult = false)]
    [TestCase("main.[A-Fa-f0-9]",    "main.Z",               ExpectedResult = false)]
    [TestCase("main.[A-Fa-f0-9]",    "main.@",               ExpectedResult = false)]
    [TestCase("main.[A-Fa-f0-9-]",   "main.-",               ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "-",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "a",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "b",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "c",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "e",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "f",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "g",                    ExpectedResult = true)]
    [TestCase("[a-c-e-g]",           "d",                    ExpectedResult = false)]
    [TestCase("[]0-346-8[]",         "0",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "2",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "3",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "4",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "5",                    ExpectedResult = false)]
    [TestCase("[]0-346-8[]",         "6",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "7",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "8",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "]",                    ExpectedResult = true)]
    [TestCase("[]0-346-8[]",         "[",                    ExpectedResult = true)]

    [TestCase("[!0-9]",              "a",                    ExpectedResult = true)]
    [TestCase("[!0-9]",              "Z",                    ExpectedResult = true)]
    [TestCase("[!0-9]",              "@",                    ExpectedResult = true)]
    [TestCase("[!0-9]",              "-",                    ExpectedResult = true)]
    [TestCase("[!0-9]",              "0",                    ExpectedResult = false)]
    [TestCase("[!0-9]",              "5",                    ExpectedResult = false)]
    [TestCase("[!0-9]",              "9",                    ExpectedResult = false)]
    [TestCase("[!a-z0-9]",           "0",                    ExpectedResult = false)]
    [TestCase("[!a-z0-9]",           "9",                    ExpectedResult = false)]
    [TestCase("[!a-z0-9]",           "a",                    ExpectedResult = false)]
    [TestCase("[!a-z0-9]",           "f",                    ExpectedResult = false)]
    [TestCase("[!a-z0-9]",           "A",                    ExpectedResult = true)]
    [TestCase("[!a-z0-9]",           "-",                    ExpectedResult = true)]
    [TestCase("[!a-z0-9-]",          "-",                    ExpectedResult = false)]

    [TestCase("[CB]at",              "Cat",                  ExpectedResult = true)]
    [TestCase("[CB]at",              "Bat",                  ExpectedResult = true)]
    [TestCase("[CB]at",              "CBat",                 ExpectedResult = false)]

    [TestCase("[][!]",               "]",                    ExpectedResult = true)]
    [TestCase("[][!]",               "[",                    ExpectedResult = true)]
    [TestCase("[][!]",               "!",                    ExpectedResult = true)]
    [TestCase("[][!]",               "5",                    ExpectedResult = false)]
    [TestCase("[",                   "[",                    ExpectedResult = false)]
    [TestCase("[a",                  "[a",                   ExpectedResult = false)]

    [TestCase("[--0]",               "-",                    ExpectedResult = true)]
    [TestCase("[--0]",               ".",                    ExpectedResult = true)]
    [TestCase("[--0]",               "0",                    ExpectedResult = true)]
    [TestCase("[--0]",               "/",                    ExpectedResult = false)]
    [TestCase("[--0]",               "a",                    ExpectedResult = false)]
    [TestCase("[--0]",               "1",                    ExpectedResult = false)]

    [TestCase("[!]a-]",              "b",                    ExpectedResult = true)]
    [TestCase("[!]a-]",              "]",                    ExpectedResult = false)]
    [TestCase("[!]a-]",              "a",                    ExpectedResult = false)]
    [TestCase("[!]a-]",              "-",                    ExpectedResult = false)]

    [TestCase(@"[[?*\]",             "[",                    ExpectedResult = true)]
    [TestCase(@"[[?*\]",             "?",                    ExpectedResult = true)]
    [TestCase(@"[[?*\]",             "*",                    ExpectedResult = true)]
    [TestCase(@"[[?*\]",             "\\",                   ExpectedResult = true)]
    [TestCase(@"[[?*\]",             "a",                    ExpectedResult = false)]
    [TestCase(@"[[?*\]",             "0",                    ExpectedResult = false)]

    [TestCase(@"\*",                 "*",                    ExpectedResult = true)]
    [TestCase(@"main.\*",            "main.*",               ExpectedResult = true)]
    [TestCase(@"\main.c",            "main.c",               ExpectedResult = true)]
    [TestCase(@"\[",                 "[",                    ExpectedResult = true)]
    [TestCase(@"\[\?\{name]",        "[?{name]",             ExpectedResult = true)]
    [TestCase(@"\a\b\c\d\e\f",       "abcdef",               ExpectedResult = true)]

    [TestCase("[Зз]емля",            "Земля",                ExpectedResult = true)]
    [TestCase("[Зз]емля",            "земля",                ExpectedResult = true)]

    [TestCase("*.[a-z]",             "main.c",               ExpectedResult = true)]
    [TestCase("*.{[a-z]}",           "main.c",               ExpectedResult = true)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.c",               ExpectedResult = true)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.pdb",             ExpectedResult = true)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.pdf",             ExpectedResult = true)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.pas",             ExpectedResult = true)]
    [TestCase("*.{[a-z],p?{[a-z]}}", "main.pas",             ExpectedResult = true)]
    [TestCase("*.{{[a-z]},p?[a-z]}", "main.c",               ExpectedResult = true)]
    [TestCase("*.{{[a-z]},p?[a-z]}", "main.pas",             ExpectedResult = true)]

    [TestCase("main.{a,*}",          "main.a",               ExpectedResult = true)]
    [TestCase("main.{a,*}",          "main.c",               ExpectedResult = true)]
    [TestCase("main.{a,*}",          "main.cpp",             ExpectedResult = true)]

    [TestCase("main.{a,*}.bak",      "main.a.bak",           ExpectedResult = false)]
    [TestCase("main.{a,*}.bak",      "main.c.bak",           ExpectedResult = false)]
    [TestCase("*{,cs}",              "main.cs",              ExpectedResult = true)]
    [TestCase("*{,cs}",              "main",                 ExpectedResult = true)]
    [TestCase("*{,cs}",              "main.c",               ExpectedResult = true)]
    [TestCase("*{,cs}",              "main.cpp",             ExpectedResult = true)]
    [TestCase("*{,*}",               "main.bak",             ExpectedResult = true)]

    [TestCase("*.{[a-z],p?[a-z]}",   "main.0",               ExpectedResult = false)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.pd",              ExpectedResult = false)]
    [TestCase("*.{[a-z],p?[a-z]}",   "main.exe",             ExpectedResult = false)]
    [TestCase("*.[a-z]",             "main.0",               ExpectedResult = false)]
    [TestCase("*.{[a-z]}",           "main.0",               ExpectedResult = false)]

    [TestCase("a*",                  "aaaaaa",               ExpectedResult = true)]
    [TestCase("a**",                 "aaaaaa",               ExpectedResult = true)]
    [TestCase("a***",                "aaaaaa",               ExpectedResult = true)]
    [TestCase("abc*",                "abcabc",               ExpectedResult = true)]
    [TestCase("*abc",                "abcabc",               ExpectedResult = true)]
    [TestCase("*abc*",               "abcabc",               ExpectedResult = true)]
    [TestCase("**abc*",              "abcabc",               ExpectedResult = true)]
    [TestCase("*ac*ae*ag*",          "abacadaeafag",         ExpectedResult = true)]
    [TestCase("*ab*[cd]*e*f*g*",     "abacadaeafag",         ExpectedResult = true)]
    public bool IsMatchSegment(string pattern, string value) =>
        Matcher.IsMatch(pattern, value, MatchFlags.Unix);

    [TestCase("/dir", "/dir", ExpectedResult = true)]
    [TestCase("dir", "dir",   ExpectedResult = true)]
    [TestCase("/dir", "dir/", ExpectedResult = true)]
    [TestCase("dir/", "/dir", ExpectedResult = true)]
    [TestCase("dir/", "dir/", ExpectedResult = true)]
    [TestCase("dir", "/dir/", ExpectedResult = true)]

    [TestCase("dir1/dir2/file.cs",    "/dir1/dir2/file.cs",    ExpectedResult = true)]
    [TestCase("dir1/dir2/file.cs",    "/dir1/dir2/file.ps",    ExpectedResult = false)]
    [TestCase("dir1/*/file.cs",       "/dir1/dir2/file.cs",    ExpectedResult = true)]
    [TestCase("*/*/*.{cs,ps,c}",      "/dir1/dir2/file.ps",    ExpectedResult = true)]
    [TestCase("*/*/*.{cs,ps,c}",      "/dir1/dir2/file.js",    ExpectedResult = false)]
    [TestCase("dir1/{d2,d3}/file.cs", "/dir1/d2/file.cs",      ExpectedResult = true)]
    [TestCase("dir1/{d2,d3}/file.cs", "/dir1/d3/file.cs",      ExpectedResult = true)]
    [TestCase("dir1/{d2,d3}/file.cs", "/dir1/d4/file.cs",      ExpectedResult = false)]
    [TestCase("*/*/*",                "/dir1/dir2/file",       ExpectedResult = true)]
    [TestCase("*/*/*",                "/d1/d2/d3/d4",          ExpectedResult = false)]
    [TestCase("a/b/c",                "/a///b///c//",          ExpectedResult = true)]
    [TestCase("a/b/c",                "/a///b///c////",        ExpectedResult = true)]
    [TestCase("///a////b/c////",      "/a///b///c////",        ExpectedResult = true)]

    [TestCase("*/*",                  "a/b",                   ExpectedResult = true)]
    [TestCase("*/*",                  "a",                     ExpectedResult = false)]
    [TestCase("*/*",                  "a/",                    ExpectedResult = false)]
    [TestCase("*/*/",                 "a",                     ExpectedResult = false)]
    [TestCase("*/{}",                 "a",                     ExpectedResult = false)]
    [TestCase("*/{,}",                "a",                     ExpectedResult = false)]
    [TestCase("*/*/{,}",              "a/b",                   ExpectedResult = false)]
    [TestCase("*/*/*",                "",                      ExpectedResult = false)]
    [TestCase("*/*/*",                "a",                     ExpectedResult = false)]
    [TestCase("*/*/*",                "a/b",                   ExpectedResult = false)]
    [TestCase("*/*/*",                "a/b/c",                 ExpectedResult = true)]
    [TestCase("a/b/c",                "",                      ExpectedResult = false)]
    [TestCase("a/b/c",                "a",                     ExpectedResult = false)]
    [TestCase("a/b/c",                "a/b",                   ExpectedResult = false)]
    [TestCase("a/b/c",                "a/b/c",                 ExpectedResult = true)]

    [TestCase("*/{,b}",               "a/b",                   ExpectedResult = true)]
    [TestCase("*/{,b}",               "a",                     ExpectedResult = false)]
    [TestCase("*/{,b}",               "a/",                    ExpectedResult = false)]
    [TestCase("*/{,}",                "a",                     ExpectedResult = false)]
    [TestCase("*/{,}",                "a/",                    ExpectedResult = false)]
    [TestCase("*/{,}",                "a/b",                   ExpectedResult = false)]
    [TestCase("*/{}",                 "a",                     ExpectedResult = false)]
    [TestCase("*/{}",                 "a/",                    ExpectedResult = false)]
    [TestCase("*/{}",                 "a/b",                   ExpectedResult = false)]

    [TestCase("",                     "",                      ExpectedResult = true)]
    [TestCase("",                     "a",                     ExpectedResult = false)]
    [TestCase("/",                    "a",                     ExpectedResult = false)]

    [TestCase("*",                    "",                      ExpectedResult = true)]
    [TestCase("**",                   "",                      ExpectedResult = true)]
    [TestCase("a/b/**",               "",                      ExpectedResult = false)]
    [TestCase("a/b/**",               "a",                     ExpectedResult = false)]
    [TestCase("a/b/**",               "a/b",                   ExpectedResult = true)]
    [TestCase("a/b/**",               "a/b/c",                 ExpectedResult = true)]
    [TestCase("a/b/**",               "a/b/c/d",               ExpectedResult = true)]
    [TestCase("a/b/**/*",             "",                      ExpectedResult = false)]
    [TestCase("a/b/**/*",             "a",                     ExpectedResult = false)]
    [TestCase("a/b/**/*",             "a/b",                   ExpectedResult = true)]
    [TestCase("a/b/**/*",             "a/b/c",                 ExpectedResult = true)]
    [TestCase("a/b/**/*",             "a/b/c/d",               ExpectedResult = true)]
    [TestCase("**/*",                 "",                      ExpectedResult = true)]
    [TestCase("a/**/c/d",             "a/b/c/d",               ExpectedResult = true)]
    [TestCase("a/**/c/d",             "a/c/d",                 ExpectedResult = true)]
    [TestCase("a/**/c/d",             "a/b/e/f/c/d",           ExpectedResult = true)]
    [TestCase("a/**/c/d",             "a/b/c/d/e",             ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/b/c/d",               ExpectedResult = true)]
    [TestCase("a/**/c/**/d",          "a/c/d",                 ExpectedResult = true)]
    [TestCase("a/**/c/**/d",          "a/b/e/f/c/g/c/d",       ExpectedResult = true)]
    [TestCase("a/**/c/**/d",          "a/c/d/a/c/d/a/c/d/",    ExpectedResult = true)]
    [TestCase("a/**/c/**/d",          "a/c/d/a/c/d/a/c/f/",    ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/c/d/a/c/d/a/c/d/f/",  ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/c/d/e",               ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "b/c/d/e",               ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/c/c/f",               ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/c/e",                 ExpectedResult = false)]
    [TestCase("a/**/c/**/d",          "a/e/c",                 ExpectedResult = false)]
    [TestCase("**",                   "a",                     ExpectedResult = true)]
    [TestCase("**",                   "a/b/c",                 ExpectedResult = true)]
    [TestCase("**/*",                 "a",                     ExpectedResult = true)]
    [TestCase("**/*",                 "a/b/c",                 ExpectedResult = true)]
    public bool IsMatch(string pattern, string path) =>
        Matcher.IsMatch(pattern, path, MatchFlags.Unix);

    [TestCase(@"\a\b\*\d\e",  "ab*de", ExpectedResult = true)]
    [TestCase(@"\a\b\*\d\e",  "abcde", ExpectedResult = false)]
    public bool IsMatch_Unix(string pattern, string path) =>
        Matcher.IsMatch(pattern, path, MatchFlags.Unix);

    [TestCase(@"\a\b\*\d\e",  @"\a\b\c\d\e",   ExpectedResult = true)]
    [TestCase(@"\a\b\*\d\e",  @"/a/b\c/d/e",   ExpectedResult = true)]
    [TestCase(@"/a/b/*\d/e",  @"\a\b/c\d\e\",  ExpectedResult = true)]
    [TestCase(@"\a\b\*\d\e",  @"\a\b\c\d\e\f", ExpectedResult = false)]
    public bool IsMatch_Windows(string pattern, string path) =>
        Matcher.IsMatch(pattern, path, MatchFlags.Windows);

    [Test]
    public void Bang()
    {
        Matcher.IsMatch("*.txt", new string('a', 10000) + ".txt");
        Matcher.IsMatch("a*a*a*a*a*a*a*a*a*a*a*a*a*a*b", new string('a', 200));
        Matcher.IsMatch("a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/a/**/b", string.Join("/", Enumerable.Repeat("a", 200)));
    }
}
